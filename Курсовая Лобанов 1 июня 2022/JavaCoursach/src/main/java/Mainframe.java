

import java.net.*;
import java.util.*;
import java.io.*;
import java.nio.*;
import java.nio.channels.*;
import java.nio.charset.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Mainframe extends javax.swing.JFrame {
    public Mainframe() {
        initComponents();
    }
    // Выбираем порт вне пределов 1-1024:

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        textArea1 = new java.awt.TextArea();
        label1 = new java.awt.Label();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );

        label1.setText("Server");

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton1ActionPerformed(evt);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(113, 113, 113))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(46, 46, 46))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panel1.getAccessibleContext().setAccessibleName("mainPanel");
        label1.getAccessibleContext().setAccessibleName("Name, label");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static final int PORT = 8080;
    public static LinkedList<ServerSomthing> serverList = new LinkedList<>(); // список всех нитей


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_jButton1ActionPerformed
        ServerSocket server = null;
        int ConnectionCount;
        server = new ServerSocket(8080);
        try
        {
            while (true)
            {
                // Блокируется до возникновения нового соединения:
                Socket socket1 = server.accept();
                Socket socket2 = server.accept();
                try
                {

                    serverList.add(new ServerSomthing(socket1, socket2)); // добавить новое соединенние в список
                } 
                catch (IOException e)
                {
                    socket1.close();
                    socket2.close();
                }
            }
        }
        finally
        {
                server.close();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    public static void main(String args[]) throws IOException
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run() {
                new Mainframe().setVisible(true);
            }
        });


    }
class ServerSomthing extends Thread {

    private Socket socket1;
    private Socket socket2;
    // сокет, через который сервер общается с клиентом,
    // кроме него - клиент и сервер никак не связаны
    private BufferedReader in1; // поток чтения из сокета
    private BufferedWriter out1; // поток записи в сокет

    private BufferedReader in2; // поток чтения из сокета
    private BufferedWriter out2; // поток записи в сокет

    public ServerSomthing(Socket socket1, Socket socket2) throws IOException {
        this.socket1 = socket1;
        this.socket2 = socket2;
        // если потоку ввода/вывода приведут к генерированию исключения, оно проброситься дальше
        in1 = new BufferedReader(new InputStreamReader(socket1.getInputStream()));
        out1 = new BufferedWriter(new OutputStreamWriter(socket1.getOutputStream()));

        in2 = new BufferedReader(new InputStreamReader(socket2.getInputStream()));
        out2 = new BufferedWriter(new OutputStreamWriter(socket2.getOutputStream()));

        start(); // вызываем run()
    }
    @Override
    public void run() {
        String word;
        try
        {
            int Count1 = 0;
            int Count2 = 0;

            out1.write("found\n");
            out2.write("found\n");
            out1.flush();
            out2.flush();

            while (true)
            {

                String choose1 = in1.readLine();
                String choose2 = in2.readLine();

                if (Objects.equals(choose1, choose2))
                {
                    out1.write("draw\n");
                    out2.write("draw\n");
                    out1.flush();
                    out2.flush();
                }
                if ((Objects.equals(choose1, "rock")) && (Objects.equals(choose2, "paper")))
                {
                    out1.write("lose\n");
                    out2.write("win\n");

                    Count2++;

                    out1.write(Count2+ "\n");
                    out2.write(Count2+ "\n");


                    out1.flush();
                    out2.flush();
                }
                if ((Objects.equals(choose1, "rock")) && (Objects.equals(choose2, "scissors")))
                {
                    out1.write("win\n");

                    out2.write("lose\n");

                    Count1++;

                    out1.write(Count1 + "\n");

                    out2.write(Count1+ "\n");
                    out1.flush();
                    out2.flush();
                }
                if ((Objects.equals(choose1, "paper")) && (Objects.equals(choose2, "rock")))
                {
                    out1.write("win\n");

                    out2.write("lose\n");

                    Count1++;

                    out1.write(Count1 + "\n");

                    out2.write(Count1+ "\n");
                    out1.flush();
                    out2.flush();
                }
                if ((Objects.equals(choose1, "paper")) && (Objects.equals(choose2, "scissors")))
                {
                    out1.write("lose\n");

                    out2.write("win\n");

                    Count2++;

                    out1.write(Count2+ "\n");

                    out2.write(Count2+ "\n");
                    out1.flush();
                    out2.flush();
                }
                if ((Objects.equals(choose1, "scissors")) && (Objects.equals(choose2, "rock")))
                {
                    out1.write("lose\n");

                    out2.write("win\n");

                    Count2++;

                    out1.write(Count2+ "\n");

                    out2.write(Count2+ "\n");
                    out1.flush();
                    out2.flush();
                }
                if ((Objects.equals(choose1, "scissors")) && (Objects.equals(choose2, "paper")))
                {
                    out1.write("win\n");

                    out2.write("lose\n");

                    Count1++;

                    out1.write(Count1 + "\n");

                    out2.write(Count1+ "\n");
                    out1.flush();
                    out2.flush();
                }

                if((Count1 != 3) && (Count2 != 3))
                {
                    out1.write("continue\n");
                    out2.write("continue\n");
                    out1.flush();
                    out2.flush();
                }
                else
                {
                    out1.write("endgame\n");
                    out2.write("endgame\n");
                    out1.flush();
                    out2.flush();

                    socket1.close();
                    socket2.close();
                    
                    return;
                }
            }


        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private java.awt.Label label1;
    private java.awt.Panel panel1;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}

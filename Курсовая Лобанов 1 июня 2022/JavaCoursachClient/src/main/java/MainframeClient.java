
import java.awt.*;
import java.net.*;

import java.io.*;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;

public class MainframeClient extends javax.swing.JFrame 
{
    public MainframeClient() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        mainMenuPanel = new javax.swing.JPanel();
        mainMenuSignature = new javax.swing.JLabel();
        mainMenuStartButton = new javax.swing.JButton();
        mainMenuLabel = new javax.swing.JLabel();
        connectingPanel = new javax.swing.JPanel();
        connectingLabel = new javax.swing.JLabel();
        gamePanel = new javax.swing.JPanel();
        gameYourPick = new javax.swing.JLabel();
        gameRockChooser = new javax.swing.JLabel();
        gamePaperChooser = new javax.swing.JLabel();
        gameScissorsChooser = new javax.swing.JLabel();
        gameEnemyPick = new javax.swing.JLabel();
        gameYouLabel = new javax.swing.JLabel();
        gameEnemyLabel = new javax.swing.JLabel();
        gameYourPoints = new javax.swing.JLabel();
        gameDashLabel = new javax.swing.JLabel();
        gameEnemyPoints = new javax.swing.JLabel();
        gameSendButton = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(0, 0));

        mainPanel.setLayout(new java.awt.CardLayout());

        mainMenuSignature.setText("Выполнил ученик 19ВВ2 Лобанов Дмитрий");

        mainMenuStartButton.setText("Start");
        mainMenuStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuStartButtonActionPerformed(evt);
            }
        });

        mainMenuLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        mainMenuLabel.setText("ROCK, PAPER, SCISSORS");

        javax.swing.GroupLayout mainMenuPanelLayout = new javax.swing.GroupLayout(mainMenuPanel);
        mainMenuPanel.setLayout(mainMenuPanelLayout);
        mainMenuPanelLayout.setHorizontalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addGroup(mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mainMenuLabel)
                    .addGroup(mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainMenuPanelLayout.createSequentialGroup()
                            .addGap(90, 90, 90)
                            .addComponent(mainMenuSignature, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(mainMenuPanelLayout.createSequentialGroup()
                            .addGap(75, 75, 75)
                            .addComponent(mainMenuStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        mainMenuPanelLayout.setVerticalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(mainMenuLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(mainMenuStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mainMenuSignature)
                .addGap(48, 48, 48))
        );

        mainPanel.add(mainMenuPanel, "card2");

        connectingLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        connectingLabel.setText("Connecting...");

        javax.swing.GroupLayout connectingPanelLayout = new javax.swing.GroupLayout(connectingPanel);
        connectingPanel.setLayout(connectingPanelLayout);
        connectingPanelLayout.setHorizontalGroup(
            connectingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, connectingPanelLayout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addComponent(connectingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
        );
        connectingPanelLayout.setVerticalGroup(
            connectingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectingPanelLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(connectingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        mainPanel.add(connectingPanel, "card3");

        gamePanel.setPreferredSize(new java.awt.Dimension(419, 239));

        gameYourPick.setToolTipText("");

        gameRockChooser.setText("Rock");
        gameRockChooser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gameRockChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gameRockChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gameRockChooserMouseClicked(evt);
            }
        });

        gamePaperChooser.setText("Paper");
        gamePaperChooser.setToolTipText("");
        gamePaperChooser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gamePaperChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gamePaperChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gamePaperChooserMouseClicked(evt);
            }
        });

        gameScissorsChooser.setText("Scissors");
        gameScissorsChooser.setToolTipText("");
        gameScissorsChooser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gameScissorsChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gameScissorsChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gameScissorsChooserMouseClicked(evt);
            }
        });

        gameEnemyPick.setToolTipText("");

        gameYouLabel.setText("You");

        gameEnemyLabel.setText("Enemy");

        gameYourPoints.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        gameYourPoints.setText("0");

        gameDashLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        gameDashLabel.setText("-");

        gameEnemyPoints.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        gameEnemyPoints.setText("0");

        gameSendButton.setText("Send");
        gameSendButton.setActionCommand("");
        gameSendButton.setEnabled(false);
        gameSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameSendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gamePanelLayout.createSequentialGroup()
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(gameYouLabel))
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gamePanelLayout.createSequentialGroup()
                                .addComponent(gameRockChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(gamePaperChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(gameYourPoints)
                                .addComponent(gameYourPick, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addComponent(gameDashLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addComponent(gameScissorsChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(gameSendButton))
                    .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gamePanelLayout.createSequentialGroup()
                            .addComponent(gameEnemyPoints)
                            .addGap(25, 25, 25)
                            .addComponent(gameEnemyLabel))
                        .addComponent(gameEnemyPick, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gameYourPoints)
                    .addComponent(gameDashLabel)
                    .addComponent(gameEnemyPoints)
                    .addComponent(gameYouLabel)
                    .addComponent(gameEnemyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gameYourPick, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameEnemyPick, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gamePaperChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameScissorsChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameRockChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(110, 110, 110))
        );

        gameYourPick.getAccessibleContext().setAccessibleName("gameYourPick");

        mainPanel.add(gamePanel, "card4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    private static Socket clientSocket; //сокет для общения
    private static BufferedReader in; // поток чтения из сокета
    private static BufferedWriter out; // поток записи в сокет

    boolean isRockChoosed = false;
    boolean isPaperChoosed = false;
    boolean isScissorsChoosed = false;
    
    javax.swing.ImageIcon YourPaper = new javax.swing.ImageIcon("src/main/java/icons/paper_2_Your.png");
    javax.swing.ImageIcon YourRock = new javax.swing.ImageIcon("src/main/java/icons/rock_2_Your.png");
    javax.swing.ImageIcon YourScissors = new javax.swing.ImageIcon("src/main/java/icons/scissors_2_Your.png");


    javax.swing.ImageIcon ChoosePaperLabel = new javax.swing.ImageIcon("src/main/java/icons/paper.png");
    javax.swing.ImageIcon ChooseRockLabel = new javax.swing.ImageIcon("src/main/java/icons/rock.png");
    javax.swing.ImageIcon ChooseScissorsLabel = new javax.swing.ImageIcon("src/main/java/icons/scissors.png");

    javax.swing.ImageIcon EnemyPaper = new javax.swing.ImageIcon("src/main/java/icons/paper_2_Enemy.png");
    javax.swing.ImageIcon EnemyRock = new javax.swing.ImageIcon("src/main/java/icons/rock_2_Enemy.png");
    javax.swing.ImageIcon EnemyScissors = new javax.swing.ImageIcon("src/main/java/icons/scissors_2_Enemy.png");
    
    
    
    private void mainMenuStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuStartButtonActionPerformed

        mainMenuPanel.setVisible(false);
        mainMenuPanel.setEnabled(false);

        connectingPanel.setVisible(true);
        connectingPanel.setEnabled(true);

        gameRockChooser.setIcon(ChooseRockLabel);
        gamePaperChooser.setIcon(ChoosePaperLabel);
        gameScissorsChooser.setIcon(ChooseScissorsLabel);

        mainMenuPanel.updateUI();
        connectingPanel.updateUI();
        try
        {
            clientSocket = new Socket("localhost", 8080);
            // читать соообщения с сервера
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            // писать туда же
            out = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()));
            String str = in.readLine();
            if (Objects.equals(str, "found"))
            {
                connectingPanel.setVisible(false);
                connectingPanel.setEnabled(false);
                gamePanel.setVisible(true);
                gamePanel.setEnabled(true);
            }
            else
            {
                connectingLabel.setText("No one came...");
                mainMenuPanel.setEnabled(true);
                mainMenuPanel.setVisible(true);
                connectingPanel.setVisible(false);
                connectingPanel.setEnabled(false);
            }

        }
        catch (IOException e)
        {
            connectingLabel.setText("Error!");
        }


    }//GEN-LAST:event_mainMenuStartButtonActionPerformed

    private void gameRockChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameRockChooserMouseClicked
        if(gameRockChooser.isEnabled())
        {
            Border loweredBorder, raisedBorder;
            raisedBorder = BorderFactory.createRaisedBevelBorder();
            loweredBorder = BorderFactory.createLoweredBevelBorder();
            gameRockChooser.setBorder(loweredBorder);
            gamePaperChooser.setBorder(raisedBorder);
            gameScissorsChooser.setBorder(raisedBorder);
            isRockChoosed = true;
            isPaperChoosed = false;
            isScissorsChoosed = false;
            gameSendButton.setEnabled(true);
        }
    }//GEN-LAST:event_gameRockChooserMouseClicked

    private void gamePaperChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gamePaperChooserMouseClicked
        if(gamePaperChooser.isEnabled()) {
            Border loweredBorder, raisedBorder;
            raisedBorder = BorderFactory.createRaisedBevelBorder();
            loweredBorder = BorderFactory.createLoweredBevelBorder();
            gameRockChooser.setBorder(raisedBorder);
            gamePaperChooser.setBorder(loweredBorder);
            gameScissorsChooser.setBorder(raisedBorder);
            isRockChoosed = false;
            isPaperChoosed = true;
            isScissorsChoosed = false;
            gameSendButton.setEnabled(true);
        }
    }//GEN-LAST:event_gamePaperChooserMouseClicked

    private void gameScissorsChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameScissorsChooserMouseClicked
        if(gameScissorsChooser.isEnabled())
        {
            Border loweredBorder, raisedBorder;
            raisedBorder = BorderFactory.createRaisedBevelBorder();
            loweredBorder = BorderFactory.createLoweredBevelBorder();
            gameRockChooser.setBorder(raisedBorder);
            gamePaperChooser.setBorder(raisedBorder);
            gameScissorsChooser.setBorder(loweredBorder);
            isRockChoosed = false;
            isPaperChoosed = false;
            isScissorsChoosed = true;
            gameSendButton.setEnabled(true);
        }
    }//GEN-LAST:event_gameScissorsChooserMouseClicked

    private void gameSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameSendButtonActionPerformed
        try {

            if (isPaperChoosed == true)
            {
                out.write("paper" + "\n");
                gameYourPick.setIcon(YourPaper);
            } else if (isRockChoosed == true)
            {
                out.write("rock" + "\n");
                gameYourPick.setIcon(YourRock);
            } else {
                out.write("scissors" + "\n");
                gameYourPick.setIcon(YourScissors);
            }
            out.flush();

            gameSendButton.setEnabled(false);
            gameRockChooser.setEnabled(false);
            gamePaperChooser.setEnabled(false);
            gameScissorsChooser.setEnabled(false);

            String result = in.readLine();

            if (Objects.equals(result, "win"))
            {
                gameYourPoints.setText(in.readLine());
                if (isPaperChoosed == true)
                {
                    gameEnemyPick.setIcon(EnemyRock);
                }
                else if (isRockChoosed == true)
                {
                    gameEnemyPick.setIcon(EnemyScissors);
                }
                else if (isScissorsChoosed == true)
                {
                    gameEnemyPick.setIcon(EnemyPaper);
                }

            }

            if (Objects.equals(result, "lose"))
            {
                gameEnemyPoints.setText(in.readLine());
                if (isPaperChoosed == true)
                {
                    gameEnemyPick.setIcon(EnemyScissors);
                }
                else if (isRockChoosed == true)
                {
                    gameEnemyPick.setIcon(EnemyPaper);
                }
                else if (isScissorsChoosed == true)
                {
                    gameEnemyPick.setIcon(EnemyRock);
                }
            }

            if (Objects.equals(result, "draw"))
            {
                if (isPaperChoosed == true)
                {
                    gameEnemyPick.setIcon(EnemyPaper);
                }
                else if (isRockChoosed == true)
                {
                    gameEnemyPick.setIcon(EnemyRock);
                }
                else if (isScissorsChoosed == true)
                {
                    gameEnemyPick.setIcon(EnemyScissors);
                }
            }

            Thread.sleep(100);

            String gameState = in.readLine();

            if (Objects.equals(gameState, "endgame"))
            {
                gameEnemyPick.setIcon(null);
                gameYourPick.setIcon(null);
                
                gameEnemyPoints.setText("0");
                gameYourPoints.setText("0");
                
                
                
                gameSendButton.setEnabled(true);
                gameRockChooser.setEnabled(true);
                gamePaperChooser.setEnabled(true);
                gameScissorsChooser.setEnabled(true);
                
                clientSocket.close();
                in.close();
                out.close();

                gamePanel.setVisible(false);
                gamePanel.setEnabled(false);

                mainMenuPanel.setVisible(true);
                mainMenuPanel.setEnabled(true);

                return;
            }

            gameSendButton.setEnabled(true);
            gameRockChooser.setEnabled(true);
            //gameRockChooser.setVisible(false);
            gamePaperChooser.setEnabled(true);
            //gamePaperChooser.setVisible(false);
            gameScissorsChooser.setEnabled(true);
            //gameScissorsChooser.setVisible(false);
        }
        catch (IOException | InterruptedException e)
        {
            gameSendButton.setText("Error!");
        }


    }//GEN-LAST:event_gameSendButtonActionPerformed
    

    
    public static void main(String args[]) throws IOException
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainframeClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainframeClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainframeClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainframeClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() {
                new MainframeClient().setVisible(true);
            }
        });
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel connectingLabel;
    private javax.swing.JPanel connectingPanel;
    private javax.swing.JLabel gameDashLabel;
    private javax.swing.JLabel gameEnemyLabel;
    private javax.swing.JLabel gameEnemyPick;
    private javax.swing.JLabel gameEnemyPoints;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel gamePaperChooser;
    private javax.swing.JLabel gameRockChooser;
    private javax.swing.JLabel gameScissorsChooser;
    private javax.swing.JButton gameSendButton;
    private javax.swing.JLabel gameYouLabel;
    private javax.swing.JLabel gameYourPick;
    private javax.swing.JLabel gameYourPoints;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel mainMenuLabel;
    private javax.swing.JPanel mainMenuPanel;
    private javax.swing.JLabel mainMenuSignature;
    private javax.swing.JButton mainMenuStartButton;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
}
